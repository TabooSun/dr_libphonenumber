// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'package:meta/meta.dart' as meta;

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart'
    if (dart.library.html) 'bridge_generated.web.dart';

abstract class DrLibphonenumber {
  /// Format the [phoneNumber] using the [phoneNumberFormat].
  String format(
      {required String phoneNumber,
      required String isoCode,
      required DrPhoneNumberFormat phoneNumberFormat,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFormatConstMeta;

  DrPhoneNumberType getNumberType(
      {required String phoneNumber, required String isoCode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetNumberTypeConstMeta;

  String getRegionCodeForCountryCode({required int callingCode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetRegionCodeForCountryCodeConstMeta;

  DrRegionInfo getRegionInfo(
      {required String phoneNumber, required String isoCode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetRegionInfoConstMeta;

  /// Check if the [phoneNumber] is a valid phone number that satisfies all the
  /// [DrPhoneNumberType] except [DrPhoneNumberType.Unknown].
  bool isValidPhoneNumber(
      {required String phoneNumber, required String isoCode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsValidPhoneNumberConstMeta;
}

enum DrPhoneNumberFormat {
  /// E.164 formatting, no spaces, no decorations.
  e164,

  /// International formatting, contains country code and country dependent
  /// formatting.
  international,

  /// National formatting, no country code and country dependent formatting.
  national,

  /// RFC3966 formatting, see the RFC.
  rfc3966,
}

enum DrPhoneNumberType {
  ///
  fixedLine,

  ///
  mobile,

  /// In some regions (e.g. the USA), it is impossible to distinguish between
  /// fixed-line and mobile numbers by looking at the phone number itself.
  fixedLineOrMobile,

  /// Freephone lines.
  tollFree,

  ///
  premiumRate,

  /// The cost of this call is shared between the caller and the recipient, and
  /// is hence typically less than PREMIUM_RATE calls. See
  /// http://en.wikipedia.org/wiki/Shared_Cost_Service for more information.
  sharedCost,

  /// A personal number is associated with a particular person, and may be
  /// routed to either a MOBILE or FIXED_LINE number. Some more information can
  /// be found here: http://en.wikipedia.org/wiki/Personal_Numbers
  personalNumber,

  /// Voice over IP numbers. This includes TSoIP (Telephony Service over IP).
  voip,

  ///
  pager,

  /// Used for "Universal Access Numbers" or "Company Numbers". They may be
  /// further routed to specific offices, but allow one number to be used for a
  /// company.
  uan,

  ///
  emergency,

  /// Used for "Voice Mail Access Numbers".
  voicemail,

  ///
  shortCode,

  ///
  standardRate,

  ///
  carrier,

  ///
  noInternational,

  /// A phone number is of type UNKNOWN when it does not fit any of the known
  /// patterns for a specific region.
  unknown,
}

/// Check https://countrycode.org/ for detail.
@meta.immutable
class DrRegionInfo {
  /// The region code or calling code.
  final int regionCode;

  /// The phone number excluding the [regionCode].
  final int phoneNumberValue;

  /// The country code.
  final String countryCode;

  /// The formatted phone number with combination of [regionCode] & [phoneNumberValue].
  final String formattedPhoneNumber;

  const DrRegionInfo({
    required this.regionCode,
    required this.phoneNumberValue,
    required this.countryCode,
    required this.formattedPhoneNumber,
  });
}

class DrLibphonenumberImpl implements DrLibphonenumber {
  final DrLibphonenumberPlatform _platform;
  factory DrLibphonenumberImpl(ExternalLibrary dylib) =>
      DrLibphonenumberImpl.raw(DrLibphonenumberPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory DrLibphonenumberImpl.wasm(FutureOr<WasmModule> module) =>
      DrLibphonenumberImpl(module as ExternalLibrary);
  DrLibphonenumberImpl.raw(this._platform);
  String format(
      {required String phoneNumber,
      required String isoCode,
      required DrPhoneNumberFormat phoneNumberFormat,
      dynamic hint}) {
    var arg0 = _platform.api2wire_String(phoneNumber);
    var arg1 = _platform.api2wire_String(isoCode);
    var arg2 = api2wire_dr_phone_number_format(phoneNumberFormat);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_format(arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kFormatConstMeta,
      argValues: [phoneNumber, isoCode, phoneNumberFormat],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFormatConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "format",
        argNames: ["phoneNumber", "isoCode", "phoneNumberFormat"],
      );

  DrPhoneNumberType getNumberType(
      {required String phoneNumber, required String isoCode, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phoneNumber);
    var arg1 = _platform.api2wire_String(isoCode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_number_type(arg0, arg1),
      parseSuccessData: _wire2api_dr_phone_number_type,
      constMeta: kGetNumberTypeConstMeta,
      argValues: [phoneNumber, isoCode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetNumberTypeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_number_type",
        argNames: ["phoneNumber", "isoCode"],
      );

  String getRegionCodeForCountryCode({required int callingCode, dynamic hint}) {
    var arg0 = api2wire_u16(callingCode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () =>
          _platform.inner.wire_get_region_code_for_country_code(arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kGetRegionCodeForCountryCodeConstMeta,
      argValues: [callingCode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetRegionCodeForCountryCodeConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_region_code_for_country_code",
        argNames: ["callingCode"],
      );

  DrRegionInfo getRegionInfo(
      {required String phoneNumber, required String isoCode, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phoneNumber);
    var arg1 = _platform.api2wire_String(isoCode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_get_region_info(arg0, arg1),
      parseSuccessData: _wire2api_dr_region_info,
      constMeta: kGetRegionInfoConstMeta,
      argValues: [phoneNumber, isoCode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetRegionInfoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_region_info",
        argNames: ["phoneNumber", "isoCode"],
      );

  bool isValidPhoneNumber(
      {required String phoneNumber, required String isoCode, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phoneNumber);
    var arg1 = _platform.api2wire_String(isoCode);
    return _platform.executeSync(FlutterRustBridgeSyncTask(
      callFfi: () => _platform.inner.wire_is_valid_phone_number(arg0, arg1),
      parseSuccessData: _wire2api_bool,
      constMeta: kIsValidPhoneNumberConstMeta,
      argValues: [phoneNumber, isoCode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsValidPhoneNumberConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "is_valid_phone_number",
        argNames: ["phoneNumber", "isoCode"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DrPhoneNumberType _wire2api_dr_phone_number_type(dynamic raw) {
    return DrPhoneNumberType.values[raw as int];
  }

  DrRegionInfo _wire2api_dr_region_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DrRegionInfo(
      regionCode: _wire2api_u16(arr[0]),
      phoneNumberValue: _wire2api_u64(arr[1]),
      countryCode: _wire2api_String(arr[2]),
      formattedPhoneNumber: _wire2api_String(arr[3]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_dr_phone_number_format(DrPhoneNumberFormat raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
