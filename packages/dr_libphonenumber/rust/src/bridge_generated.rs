#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.78.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::dr_libphonenumber::models::phone_number_format::DrPhoneNumberFormat;
use crate::dr_libphonenumber::models::region_info::DrRegionInfo;
use crate::dr_libphonenumber::utils::number_type::DrPhoneNumberType;

// Section: wire functions

fn wire_format_impl(
    phone_number: impl Wire2Api<String> + UnwindSafe,
    iso_code: impl Wire2Api<String> + UnwindSafe,
    phone_number_format: impl Wire2Api<DrPhoneNumberFormat> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "format",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_phone_number = phone_number.wire2api();
            let api_iso_code = iso_code.wire2api();
            let api_phone_number_format = phone_number_format.wire2api();
            Ok(format(
                api_phone_number,
                api_iso_code,
                api_phone_number_format,
            ))
        },
    )
}
fn wire_get_number_type_impl(
    phone_number: impl Wire2Api<String> + UnwindSafe,
    iso_code: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_number_type",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_phone_number = phone_number.wire2api();
            let api_iso_code = iso_code.wire2api();
            Ok(get_number_type(api_phone_number, api_iso_code))
        },
    )
}
fn wire_get_region_code_for_country_code_impl(
    calling_code: impl Wire2Api<u16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_region_code_for_country_code",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_calling_code = calling_code.wire2api();
            Ok(get_region_code_for_country_code(api_calling_code))
        },
    )
}
fn wire_get_region_info_impl(
    phone_number: impl Wire2Api<String> + UnwindSafe,
    iso_code: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "get_region_info",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_phone_number = phone_number.wire2api();
            let api_iso_code = iso_code.wire2api();
            Ok(get_region_info(api_phone_number, api_iso_code))
        },
    )
}
fn wire_is_valid_phone_number_impl(
    phone_number: impl Wire2Api<String> + UnwindSafe,
    iso_code: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "is_valid_phone_number",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_phone_number = phone_number.wire2api();
            let api_iso_code = iso_code.wire2api();
            Ok(is_valid_phone_number(api_phone_number, api_iso_code))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<DrPhoneNumberFormat> for i32 {
    fn wire2api(self) -> DrPhoneNumberFormat {
        match self {
            0 => DrPhoneNumberFormat::E164,
            1 => DrPhoneNumberFormat::International,
            2 => DrPhoneNumberFormat::National,
            3 => DrPhoneNumberFormat::Rfc3966,
            _ => unreachable!("Invalid variant for DrPhoneNumberFormat: {}", self),
        }
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for DrPhoneNumberType {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::FixedLine => 0,
            Self::Mobile => 1,
            Self::FixedLineOrMobile => 2,
            Self::TollFree => 3,
            Self::PremiumRate => 4,
            Self::SharedCost => 5,
            Self::PersonalNumber => 6,
            Self::Voip => 7,
            Self::Pager => 8,
            Self::Uan => 9,
            Self::Emergency => 10,
            Self::Voicemail => 11,
            Self::ShortCode => 12,
            Self::StandardRate => 13,
            Self::Carrier => 14,
            Self::NoInternational => 15,
            Self::Unknown => 16,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DrPhoneNumberType {}
impl support::IntoDart for DrRegionInfo {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.region_code.into_dart(),
            self.phone_number_value.into_dart(),
            self.country_code.into_dart(),
            self.formatted_phone_number.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DrRegionInfo {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_format(
        phone_number: String,
        iso_code: String,
        phone_number_format: i32,
    ) -> support::WireSyncReturn {
        wire_format_impl(phone_number, iso_code, phone_number_format)
    }

    #[wasm_bindgen]
    pub fn wire_get_number_type(phone_number: String, iso_code: String) -> support::WireSyncReturn {
        wire_get_number_type_impl(phone_number, iso_code)
    }

    #[wasm_bindgen]
    pub fn wire_get_region_code_for_country_code(calling_code: u16) -> support::WireSyncReturn {
        wire_get_region_code_for_country_code_impl(calling_code)
    }

    #[wasm_bindgen]
    pub fn wire_get_region_info(phone_number: String, iso_code: String) -> support::WireSyncReturn {
        wire_get_region_info_impl(phone_number, iso_code)
    }

    #[wasm_bindgen]
    pub fn wire_is_valid_phone_number(
        phone_number: String,
        iso_code: String,
    ) -> support::WireSyncReturn {
        wire_is_valid_phone_number_impl(phone_number, iso_code)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }

    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }
    // Section: impl Wire2Api for JsValue

    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<DrPhoneNumberFormat> for JsValue {
        fn wire2api(self) -> DrPhoneNumberFormat {
            (self.unchecked_into_f64() as i32).wire2api()
        }
    }
    impl Wire2Api<i32> for JsValue {
        fn wire2api(self) -> i32 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u16> for JsValue {
        fn wire2api(self) -> u16 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_format(
        phone_number: *mut wire_uint_8_list,
        iso_code: *mut wire_uint_8_list,
        phone_number_format: i32,
    ) -> support::WireSyncReturn {
        wire_format_impl(phone_number, iso_code, phone_number_format)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_number_type(
        phone_number: *mut wire_uint_8_list,
        iso_code: *mut wire_uint_8_list,
    ) -> support::WireSyncReturn {
        wire_get_number_type_impl(phone_number, iso_code)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_region_code_for_country_code(
        calling_code: u16,
    ) -> support::WireSyncReturn {
        wire_get_region_code_for_country_code_impl(calling_code)
    }

    #[no_mangle]
    pub extern "C" fn wire_get_region_info(
        phone_number: *mut wire_uint_8_list,
        iso_code: *mut wire_uint_8_list,
    ) -> support::WireSyncReturn {
        wire_get_region_info_impl(phone_number, iso_code)
    }

    #[no_mangle]
    pub extern "C" fn wire_is_valid_phone_number(
        phone_number: *mut wire_uint_8_list,
        iso_code: *mut wire_uint_8_list,
    ) -> support::WireSyncReturn {
        wire_is_valid_phone_number_impl(phone_number, iso_code)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }

    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }
    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;
